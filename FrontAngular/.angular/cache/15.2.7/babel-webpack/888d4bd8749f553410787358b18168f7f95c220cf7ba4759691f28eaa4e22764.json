{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError, retry, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClienteService {\n  //Injetando Cliente para requisição e serviço de Token para as requisições.\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    //Url da API\n    this.url = 'https://localhost:7198/api/Mesa/';\n  }\n  getClienteByCPF(cpf, token) {\n    return this.httpClient.get(`${this.url}FiltrarPorCpf/${cpf}`, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token,\n        'Content-Type': 'application/json'\n      })\n    }).pipe(retry(2), catchError(this.handleError));\n  }\n  //Manuseio de erros\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Erro ocorreu no lado do client\n      errorMessage = error.error.message;\n    } else {\n      // Erro ocorreu no lado do servidor\n      errorMessage = `Código do erro: ${error.status}, ` + `menssagem: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nClienteService.ɵfac = function ClienteService_Factory(t) {\n  return new (t || ClienteService)(i0.ɵɵinject(i1.HttpClient));\n};\nClienteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClienteService,\n  factory: ClienteService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAGEA,WAAW,QACN,sBAAsB;AAE7B,SAAqBC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;;;AAMhE,OAAM,MAAOC,cAAc;EACzB;EACAC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAE9B;IACA,QAAG,GAAG,kCAAkC;EAHK;EAK7CC,eAAe,CAACC,GAAW,EAAEC,KAAa;IACxC,OAAO,IAAI,CAACH,UAAU,CACnBI,GAAG,CAAS,GAAG,IAAI,CAACC,GAAG,iBAAiBH,GAAG,EAAE,EAAE;MAC9CI,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvBa,aAAa,EAAE,SAAS,GAAGJ,KAAK;QAChC,cAAc,EAAE;OACjB;KACF,CAAC,CACDK,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAC,EAAEC,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACjD;EACA;EACAA,WAAW,CAACC,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GACV,mBAAmBD,KAAK,CAACI,MAAM,IAAI,GAAG,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEvEE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOhB,UAAU,CAACgB,YAAY,CAAC;EACjC;;AA9BWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAmB,SAAdnB,cAAc;EAAAoB,YAFb;AAAM","names":["HttpHeaders","throwError","retry","catchError","ClienteService","constructor","httpClient","getClienteByCPF","cpf","token","get","url","headers","Authorization","pipe","handleError","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["E:\\AceleraPL\\AceleraPlenoAngular\\src\\app\\services\\cliente\\cliente.service.ts"],"sourcesContent":["import {\r\n  HttpClient,\r\n  HttpErrorResponse,\r\n  HttpHeaders,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError, retry, catchError } from 'rxjs';\r\nimport { Mesa } from 'src/app/models/mesa';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ClienteService {\r\n  //Injetando Cliente para requisição e serviço de Token para as requisições.\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  //Url da API\r\n  url = 'https://localhost:7198/api/Mesa/';\r\n\r\n  getClienteByCPF(cpf: string, token: string): Observable<Mesa[]> {\r\n    return this.httpClient\r\n      .get<Mesa[]>(`${this.url}FiltrarPorCpf/${cpf}`, {\r\n        headers: new HttpHeaders({\r\n          Authorization: 'Bearer ' + token,\r\n          'Content-Type': 'application/json',\r\n        }),\r\n      })\r\n      .pipe(retry(2), catchError(this.handleError));\r\n  }\r\n  //Manuseio de erros\r\n  handleError(error: HttpErrorResponse) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Erro ocorreu no lado do client\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Erro ocorreu no lado do servidor\r\n      errorMessage =\r\n        `Código do erro: ${error.status}, ` + `menssagem: ${error.message}`;\r\n    }\r\n    console.log(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}