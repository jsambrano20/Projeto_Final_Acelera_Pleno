{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TokenService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'https://localhost:7198/api/Token/autenticarAngular';\n    this.token = {\n      clienteId: 'abacaxi123',\n      clienteSecret: 'segredodoabacaxi'\n    };\n    //Headers\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  //Chamada para obter token\n  getToken() {\n    return this.httpClient.post(this.url, JSON.stringify(this.token), this.httpOptions).pipe(retry(2), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Erro ocorreu no lado do client\n      errorMessage = error.error.message;\n    } else {\n      // Erro ocorreu no lado do servidor\n      errorMessage = `Código do erro: ${error.status}, ` + `menssagem: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nTokenService.ɵfac = function TokenService_Factory(t) {\n  return new (t || TokenService)(i0.ɵɵinject(i1.HttpClient));\n};\nTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenService,\n  factory: TokenService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAwCA,WAAW,QAAQ,sBAAsB;AAEjF,SAAqBC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,MAAM;;;AAMhE,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAG9B,QAAG,GAAG,oDAAoD;IAC1D,UAAK,GAAG;MACNC,SAAS,EAAE,YAAY;MACvBC,aAAa,EAAE;KACF;IACf;IACA,gBAAW,GAAG;MAAEC,OAAO,EAAE,IAAIT,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;IAAC,CAAE;EAPlF;EASA;EACEU,QAAQ;IACR,OAAO,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAe,IAAI,CAACC,GAAG,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,KAAK,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC,CAACC,IAAI,CACpGf,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CACvC;EACH;EAGAA,WAAW,CAACC,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IAAE,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MAAE;MAC9DD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MAAE;MACPF,YAAY,GAAG,mBAAmBD,KAAK,CAACI,MAAM,IAAI,GAAG,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAClFE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IAAE,OAAOjB,UAAU,CAACiB,YAAY,CAAC;EAC9D;;AA3BWhB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAsB,SAAZtB,YAAY;EAAAuB,YAFX;AAAM","names":["HttpHeaders","catchError","retry","throwError","TokenService","constructor","httpClient","clienteId","clienteSecret","headers","getToken","post","url","JSON","stringify","token","httpOptions","pipe","handleError","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["E:\\AceleraPL\\AceleraPlenoAngular\\src\\app\\services\\token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { TokenModel } from '../models/token_model';\r\nimport { Observable, catchError, retry, throwError } from 'rxjs';\r\nimport { Tokenretorno } from '../models/tokenretorno';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n\r\n  }\r\n  url = 'https://localhost:7198/api/Token/autenticarAngular';\r\n  token = {\r\n    clienteId: 'abacaxi123',\r\n    clienteSecret: 'segredodoabacaxi',\r\n  } as TokenModel;\r\n  //Headers\r\n  httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) }\r\n\r\n  //Chamada para obter token\r\n    getToken(): Observable<Tokenretorno> {\r\n    return this.httpClient.post<Tokenretorno>(this.url, JSON.stringify(this.token), this.httpOptions).pipe(\r\n      retry(2), catchError(this.handleError)\r\n    )\r\n  }\r\n\r\n\r\n  handleError(error: HttpErrorResponse) {\r\n    let errorMessage = ''; if (error.error instanceof ErrorEvent) { // Erro ocorreu no lado do client\r\n      errorMessage = error.error.message;\r\n    } else { // Erro ocorreu no lado do servidor\r\n      errorMessage = `Código do erro: ${error.status}, ` + `menssagem: ${error.message}`;\r\n    } console.log(errorMessage); return throwError(errorMessage);\r\n  };\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}